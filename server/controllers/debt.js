var express = require('express');
var router = express.Router();
var Debt = require('../models/debt');

// Create a new debt
router.post('/debts', function(req, res, next) {
    /*
        `Debt.create` sends a request to the Data System in order to create
        a new document of type "Debt".

        `req.body` is the request's body, it is here assumed that it exists and
        is a valid JavaScript object, matching the schema defined in the model.
    */
    Debt.create(req.body, function(err, debt) {
        if(err) {
            /*
                If an unexpected error occurs, forward it to Express error
                middleware which will send the error properly formatted.
            */
            next(err);
        } else {
            /*
                If everything went well, send the newly created debt with the
                correct HTTP status.
            */
            res.status(201).send(debt);
        }
    });
});


// Fetch an existing debt
router.get('/debts/:id', function(req, res, next) {
    /*
        `Debt.find` sends a request to the Data System to fetch the document
        whose ID is given as a parameter.

        `req.params.id` is automatically generated by Express, based on the
        route defined above.
    */
    Debt.find(req.params.id, function(err, debt) {
        if(err) {
            /*
                If an unexpected error occurs, forward it to Express error
                middleware which will send the error properly formatted.
            */
            next(err);
        } else if (!debt) {
            /*
                If there was no unexpected error, but that the document has not
                been found, send the legitimate status code. `debt` is null.
            */
            res.sendStatus(404);
        } else {
            /*
                If everything went well, send the fetched debt with the correct
                HTTP status.
            */
            res.status(200).send(debt);
        }
    });
});


// Update an existing debt
router.put('/debts/:id', function(req, res, next) {
    /*
        First, get the document we want to update.
    */
    Debt.find(req.params.id, function(err, debt) {
        if(err) {
            /*
                If an unexpected error occurs, forward it to Express error
                middleware which will send the error properly formatted.
            */
            next(err);
        } else if(!debt) {
            /*
                If there was no unexpected error, but that the document has not
                been found, send the legitimate status code. `debt` is null.
            */
            res.sendStatus(404);
        } else {
            /*
                `Debt.updateAttributes` sends a request to the Data System to
                update the document, given its ID and the fields to update.
            */
            debt.updateAttributes(req.body, function(err, debt) {
                if(err) {
                    /*
                        If an unexpected error occurs, forward it to Express
                        error middleware which will send the error properly
                        formatted.
                    */
                    next(err);
                } else {
                    /*
                        If everything went well, send the fetched debt with the
                        correct HTTP status.
                    */
                    res.status(200).send(debt);
                }
            });
        }

    });
});


// Remove an existing debt
router.delete('/debts/:id', function(req, res, next) {
    /*
        `Debt.destroy` sends a request to the Data System to update
        the document, given its ID.
    */
    Debt.destroy(req.params.id, function(err) {
        if(err) {
            /*
                If an unexpected error occurs, forward it to Express error
                middleware which will send the error properly formatted.
            */
            next(err);
        } else {
            /*
                If everything went well, send an empty response with the correct
                HTTP status.
            */
            res.sendStatus(204);
        }
    });
});


// List of all debts, for a given creditor
router.get('/debts', function(req, res, next) {
    /*
        `Debt.request` also has an `options` parameter where you can specify
        things, like a range of keys.
    */
    var options =  {
        startkey: ['Joseph', '2015-12-01'],
        endkey: ['Joseph', '2015-12-31'],
    };
    Debt.request('byCreditorDate', options, function(err, debts) {
        if(err) {
            /*
                If an unexpected error occurs, forward it to Express error
                middleware which will send the error properly formatted.
            */
            next(err);
        } else {
            /*
                If everything went well, send an empty response with the correct
                HTTP status.
            */
            res.status(200).json(debts);
        }
    });
});


// Export the router instance to make it available from other files.
module.exports = router;
